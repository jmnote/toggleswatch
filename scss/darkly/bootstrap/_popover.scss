.popover {
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  // Allow breaking very long words so they don't overflow the popover's bounds
  background-color: $popover-bg;
  border: $popover-border-width solid $popover-border-color;
  @include box-shadow($popover-box-shadow);
  .arrow {
    &::before,
    &::after {
    }
  }
}
.bs-popover-top {
  > .arrow {
    &::before {
      border-top-color: $popover-arrow-outer-color;
    }
    &::after {
      border-top-color: $popover-arrow-color;
    }
  }
}
.bs-popover-right {
  > .arrow {
    &::before {
      border-right-color: $popover-arrow-outer-color;
    }
    &::after {
      border-right-color: $popover-arrow-color;
    }
  }
}
.bs-popover-bottom {
  > .arrow {
    &::before {
      border-bottom-color: $popover-arrow-outer-color;
    }
    &::after {
      border-bottom-color: $popover-arrow-color;
    }
  }
  // This will remove the popover-header's border just below the arrow
  .popover-header::before {
  }
}
.bs-popover-left {
  > .arrow {
    &::before {
      border-left-color: $popover-arrow-outer-color;
    }
    &::after {
      border-left-color: $popover-arrow-color;
    }
  }
}
.bs-popover-auto {
  &[x-placement^="top"] {
    @extend .bs-popover-top;
  }
  &[x-placement^="right"] {
    @extend .bs-popover-right;
  }
  &[x-placement^="bottom"] {
    @extend .bs-popover-bottom;
  }
  &[x-placement^="left"] {
    @extend .bs-popover-left;
  }
}
// Offset the popover to account for the popover arrow
.popover-header {
  color: $popover-header-color;
  background-color: $popover-header-bg;
  &:empty {
  }
}
.popover-body {
  color: $popover-body-color;
}
