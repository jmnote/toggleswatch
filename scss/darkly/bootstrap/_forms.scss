// stylelint-disable selector-no-qualifying-type
//
// Textual form controls
//
.form-control {
  color: $input-color;
  background-color: $input-bg;
  border: $input-border-width solid $input-border-color;
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include box-shadow($input-box-shadow);
  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
  }
  // Remove select outline from select box in FF
  &:-moz-focusring {
    text-shadow: 0 0 0 $input-color;
  }
  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus($ignore-warning: true);
  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
  }
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
  }
}
input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  &.form-control {
  }
}
select.form-control {
  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
  }
}
// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
}
//
// Labels
//
// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
}
.col-form-label-lg {
}
.col-form-label-sm {
}
// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)
.form-control-plaintext {
  color: $input-plaintext-color;
  &.form-control-sm,
  &.form-control-lg {
  }
}
// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.
.form-control-sm {
}
.form-control-lg {
}
// stylelint-disable-next-line no-duplicate-selectors
select.form-control {
  &[size],
  &[multiple] {
  }
}
textarea.form-control {
}
// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
}
.form-text {
}
// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.
.form-row {
  > .col,
  > [class*="col-"] {
  }
}
// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.form-check {
}
.form-check-input {
  // Use [disabled] and :disabled for workaround https://github.com/twbs/bootstrap/issues/28247
  &[disabled] ~ .form-check-label,
  &:disabled ~ .form-check-label {
    color: $text-muted;
  }
}
.form-check-label {
}
.form-check-inline {
  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
  }
}
// Form validation
//
// Provide feedback to users when form field values are valid or invalid. Works
// primarily for client-side validation via scoped `:invalid` and `:valid`
// pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
// server side validation.
@each $state, $data in $form-validation-states {
  @include form-validation-state($state, map-get($data, color), map-get($data, icon));
}
// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
.form-inline {
  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
  }
  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
    }
    // Inline-block all the things for "inline"
    .form-group {
    }
    // Allow folks to *not* use `.form-group`
    .form-control {
    }
    // Make static controls behave like regular ones
    .form-control-plaintext {
    }
    .input-group,
    .custom-select {
    }
    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
    }
    .form-check-input {
    }
    .custom-control {
    }
    .custom-control-label {
    }
  }
}
